.title
  = t(:ffcrm_mailchimp_settings, default: "Mailchimp Integration Settings")

.remote
  .section

    = form_tag 'ffcrm_mailchimp', method: 'put' do

      %p

      %br
      = check_box_tag('sync_disabled', 'true', @config.sync_disabled?)
      %label.label.top{ for: 'sync_disabled' }
        Disable sync? If checked, sync will not work in either direction.

      %p
      %br
      - if ENV['MAILCHIMP_API_KEY'].present?
        MAILCHIMP_API_KEY found in start up environment
      - else
        Please enter a MAILCHIMP_API_KEY in your start up environment
      
      %p

      Please enter a webhook key so you can authenticate incoming webhooks from Mailchimp.
      %br
      .label.top.req
        Webhook key:
        = text_field_tag 'webhook_key', @config.webhook_key, size: 30, required: true

      %p
        Add the following URL to each list webhook in Mailchimp that you want to keep in sync:
        %br
        %a{ href:"#{root_url}endpoints/mailchimp_endpoint?webhook_key=#{@config.webhook_key}" }
          = "#{root_url}endpoints/mailchimp_endpoint?webhook_key=#{@config.webhook_key}"

      %br
      .label.top.req
        Default user:
        - user_options = options_from_collection_for_select(all_users, 'id', 'full_name', @config.user_id)
        = select_tag('user_id', options_for_select(user_options), :class => 'chzn-select', :style => "width:160px")
      %br
        This is the default user for actions that occur via webhooks.
        Not all webhooks provide 'user' information, in those cases, this user will own the operation.
        It is recommended you create a Fat Free CRM user purely for this purpose.

      %br
      = check_box_tag('verbose', 'true', @config.verbose == true)
      %label.label.top{ for: 'verbose' }
        Turn on verbose logging?

      %br
      = check_box_tag('subgroups_only', 'true', @config.subgroups_only == true)
      %label.label.top{ for: 'subgroups_only' }
        Only allow subscriptions to subgroups? If checked, it will not be possible to sign up to a mailing list without selecting a subgroup.

      %br
      = check_box_tag('track_phone', 'true', @config.track_phone == true)
      %label.label.top{ for: 'track_phone' }
        Track phone via the PHONE merge tag?

      %p
        = check_box_tag('track_address', 'true', @config.track_address == true)
        %label.label.top{ for: 'track_address' }
          Track address via the following merge tags? STREET1, STREET2, CITY, STATE, ZIP, COUNTRY

        %br
        - address_types = Address.select('distinct address_type').where(addressable_type: 'Contact').pluck(:address_type)
        - address_type_options = options_for_select(address_types, @config.address_type)
        = select_tag('address_type', address_type_options)
        %label.label.top{ for: 'address_type' }
          Specify which address type to create (if address data is present).

      %p
        = check_box_tag('track_consent', 'true', @config.track_consent == true)
        %label.label.top{ for: 'track_consent' }
          Track 'Direct Marketing Consent' within Mailchimp. If enabled, sends 'Yes' or 'No' values to the CONSENT merge tag. Expects the same in return from Mailchimp.

        %br
        -# fields = Contact.columns.select{|c| c.type == :boolean}.map(&:name)
        - fields = Contact.columns.map(&:name)
        - field_options = options_for_select(fields, @config.consent_field_name)
        = select_tag('consent_field_name', field_options)
        %label.label.top{ for: 'field_options' }
          Specify which field is used as the 'Direct Marketing Consent' field.
          It should be a text column (e.g. for radio buttons) with the words 'Yes' and 'No' as options.

      %p
      = submit_tag 'Save', name: 'update', style: "width:60px"

%h2 Update from Mailchimp

= form_tag controller: 'ffcrm_mailchimp', action: 'refresh_from_mailchimp' do
  %p
    Enter a comma separated list of email addresses to sync from Mailchimp. This will reload the name, list and group subscription data ONLY.
    Will NOT update extra MERGE FIELDS such as phone, address, country and consent.
    %br
    = text_area_tag(:email_addresses, "", placeholder: "Enter email addresses to sync from Mailchimp here. Comma separated.", size: "100x4")
  %p  
    = submit_tag "Refresh data from Mailchimp", data: { confirm: "Are you sure you wish to refresh data from mailchimp?" }
    

%hr

%p
  = button_to "Clear Mailchimp caches", { action: "clear_cache" }, method: 'put', data: { confirm: "Are you sure you wish to clear the Mailchimp caches?" }
  Clear the mailchimp list and group caches. Useful if a interest groups are added or changed. Or a new list is created. Non-descructive action

%p
  = button_to "Clear all mailchimp data in CRM", { action: "clear_crm_mailchimp_data" }, method: 'put', data: { confirm: "Are you sure you wish to delete all Mailchimp List data that is stored inside CRM?" }
  Clearing all mailchimp data is useful if you want to clean out the CRM of mailchimp data
  but leave the mailchimp_list custom fields intact.

%p
  = button_to "Clear all settings and data", { action: "destroy_custom_fields" }, method: 'put', data: { confirm: "Are you sure you wish to destroy all Mailchimp List custom fields and associated data?" }
  Destroy all 'Mailchimp List' custom fields and associated data from mailchimp.
  NOTE: this is INCREDIBLY DESTRUCTIVE and should only be used if you want to
  hard reset your CRM instance back to a state before this plugin was installed.

%hr

%h2 Mailchimp configuration notes

%p
  Mailchimp allows you to add other fields to your list data and assign specific merge tags to them.
  This integration currently understands the merge tags listed below. You must set these up in the
  Mailchimp "List settings and *|MERGE|* tags" section if you want CRM to merge them.
  Basically, it's the FFCRM field name upcased.

  %ul
    %li EMAIL
    %li FIRST_NAME
    %li LAST_NAME
    %li PHONE
    %li STREET1
    %li STREET2
    %li CITY
    %li STATE
    %li ZIPCODE
    %li COUNTRY
    %li CONSENT ( has direct marketing consent been given )
