.title
  = t(:ffcrm_mailchimp_settings, default: "Mailchimp Integration Settings")

.remote
  .section

    = form_tag 'ffcrm_mailchimp', method: 'put' do

      %p

      %br
      = check_box_tag('sync_disabled', 'true', @config.sync_disabled?)
      %label.label.top{ for: 'sync_disabled' }
        Disable sync? If checked, sync will not work in either direction.

      %p

      Please enter the API key from your mailchimp account.
      %br
      .label.top.req
        Api key:
        = text_field_tag 'api_key', @config.api_key, size: 30, required: true

      %br
      .label.top.req
        Default user:
        - user_options = options_from_collection_for_select(all_users, 'id', 'full_name', @config.user_id)
        = select_tag('user_id', options_for_select(user_options), :class => 'chzn-select', :style => "width:160px")
      %br
        This is the default user for actions that occur via webhooks.
        Not all webhooks provide 'user' information, in those cases, this user will own the operation.
        It is recommended you create a Fat Free CRM user purely for this purpose.

      %br
      = check_box_tag('iron_mq', 'true', !@config.iron_mq.nil?)
      %label.label.top{ for: 'iron_mq' }
        Use Iron MQ for inbound requests?

      %br
      = check_box_tag('verbose', 'true', @config.verbose == true)
      %label.label.top{ for: 'verbose' }
        Turn on verbose logging?

      %br
      = check_box_tag('subgroups_only', 'true', @config.subgroups_only == true)
      %label.label.top{ for: 'subgroups_only' }
        Only allow subscriptions to subgroups? If checked, it will not be possible to sign up to a mailing list without selecting a subgroup.

      %br
      = check_box_tag('track_phone', 'true', @config.track_phone == true)
      %label.label.top{ for: 'track_phone' }
        Track phone via the PHONE merge tag?

      %p
        = check_box_tag('track_address', 'true', @config.track_address == true)
        %label.label.top{ for: 'track_address' }
          Track address via the following merge tags? STREET1, STREET2, CITY, STATE, ZIP, COUNTRY

        %br
        - address_types = Address.select('distinct address_type').where(addressable_type: 'Contact').pluck(:address_type)
        - address_type_options = options_for_select(address_types, @config.address_type)
        = select_tag('address_type', address_type_options)
        %label.label.top{ for: 'address_type' }
          Specify which address type to create (if address data is present).

      %p
        = check_box_tag('track_consent', 'true', @config.track_consent == true)
        %label.label.top{ for: 'track_consent' }
          Track 'Direct Marketing Consent' within Mailchimp. If enabled, sends 'Yes' or 'No' values to the CONSENT merge tag. Expects the same in return from Mailchimp.

        %br
        -# fields = Contact.columns.select{|c| c.type == :boolean}.map(&:name)
        - fields = Contact.columns.map(&:name)
        - field_options = options_for_select(fields, @config.consent_field_name)
        = select_tag('consent_field_name', field_options)
        %label.label.top{ for: 'field_options' }
          Specify which field is used as the 'Direct Marketing Consent' field.
          It should be a text column (e.g. for radio buttons) with the words 'Yes' and 'No' as options.

      %p
      = submit_tag 'Save', name: 'update', style: "width:60px"


%p
  Add the following URL to each list webhook in Mailchimp that you want to keep in sync:
  %br
  - url = "#{root_url}endpoints/mailchimp_endpoint?api_key=#{@config.api_key}"
  = link_to url, url

%p
  = button_to "Reload caches", { action: "reload_cache" }, method: 'put', data: { confirm: "Are you sure you wish to reload the caches?" }
  Clear and reload the mailchimp list and group cache

%p
  = button_to "Update data from Mailchimp", { action: "refresh_from_mailchimp" }, method: 'put', data: { confirm: "Are you sure you wish to refresh data from mailchimp?" }
  Refresh data from mailchimp. This will clear all list/group data for all mailchimp lists inside CRM and reload the subscription data from mailchimp.

%p
  = button_to "Clear all mailchimp data in CRM", { action: "clear_crm_mailchimp_data" }, method: 'put', data: { confirm: "Are you sure you wish to delete all Mailchimp List data that is stored inside CRM?" }
  Clearing all mailchimp data is useful if you want to clean out the CRM of mailchimp data
  but leave the mailchimp_list custom fields intact.

%p
  = button_to "Clear all settings and data", { action: "destroy_custom_fields" }, method: 'put', data: { confirm: "Are you sure you wish to destroy all Mailchimp List custom fields and associated data?" }
  Destroy all 'Mailchimp List' custom fields and associated data from mailchimp.
  NOTE: this is INCREDIBLY DESTRUCTIVE and should only be used if you want to
  hard reset your CRM instance back to a state before this plugin was installed.

%hr

%h2 Mailchimp configuration notes

%p
  Mailchimp allows you to add other fields to your list data and assign specific merge tags to them.
  This integration currently understands the merge tags listed below. You must set these up in the Mailchimp "List settings and *|MERGE|* tags" section if you want CRM to merge them.

  %ul
    %li FNAME - first name
    %li LNAME - last name
    %li PHONE - phone number
    %li STREET1 - address street 1
    %li STREET2 - address street 2
    %li CITY - city
    %li STATE - state
    %li ZIP - zip code
    %li COUNTRY - country
    %li CONSENT - has direct marketing consent been given
